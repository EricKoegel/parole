m4_define([intltool_minimum_version], [0.31])
m4_define([parole_verinfo],  [0:2:0])
m4_define([parole_version_api],  [0])
m4_define([parole_version_major],  [0])
m4_define([parole_version_minor],  [1])
m4_define([parole_version_micro],  [90])
m4_define([parole_version_build],  [r@REVISION@])
m4_define([parole_version_tag], [svn])
m4_define([parole_version], [parole_version_major().parole_version_minor().parole_version_micro()ifelse(parole_version_tag(), [svn], [parole_version_tag().parole_version_build()], [parole_version_tag()])])

AC_INIT([parole-media-player], [parole_version], [aliov@xfce.org])
AC_PREREQ(2.59c)

AM_INIT_AUTOMAKE([1.8 dist-bzip2 tar-ustar])
AM_CONFIG_HEADER([config.h])
AM_MAINTAINER_MODE

AC_USE_SYSTEM_EXTENSIONS

# ===================================================== #
#               Basic compiler settings                 #
# ===================================================== #
AC_PROG_CC
AM_PROG_CC_C_O
AC_PROG_LD
AC_PROG_INSTALL
AC_PROG_INTLTOOL([intltool_minimum_version], [no-xml])

# ===================================================== #
#               Initialize libtool                      #
# ===================================================== #
AC_DISABLE_STATIC
AC_PROG_LIBTOOL

# ===================================================== #
#               Version information                     #
# ===================================================== #
PAROLE_VERINFO=parole_verinfo()
PAROLE_VERSION_API=parole_version_api()
PAROLE_VERSION_MAJOR=parole_version_major()
PAROLE_VERSION_MINOR=parole_version_minor()
PAROLE_VERSION_MICRO=parole_version_micro()
AC_SUBST([PAROLE_VERINFO])
AC_SUBST([PAROLE_VERSION_API])
AC_SUBST([PAROLE_VERSION_MAJOR])
AC_SUBST([PAROLE_VERSION_MINOR])
AC_SUBST([PAROLE_VERSION_MICRO])

# ==================================================== #
#   Check for headers needed for standard interfaces   #
# ==================================================== #
AC_HEADER_STDC
AC_CHECK_HEADERS([errno.h signal.h stddef.h sys/ioctl.h fcntl.h\
                  string.h sys/stat.h sys/types.h sys/wait.h time.h \
                  unistd.h])

# ===================================================== #
# 		Check for i18n support 			#
# ===================================================== #

XDT_I18N([@LINGUAS@])

#==================================================== #
#          Check for required packages 		      #
#=====================================================#
m4_define([gtk_minimum_version], [2.16.0])
m4_define([glib_minimum_version], [2.16.0])
m4_define([gstreamer_minimum_version], [0.10.11])

m4_define([dbus_minimum_version], [0.60])
m4_define([dbus_glib_minimum_version], [0.70])

m4_define([libxfcegui4_minimum_version],[4.6.0])
m4_define([libxfce4util_minimum_version],[4.6.0])

m4_define([libnotify_minimum_version], [0.4.1])

XDT_CHECK_PACKAGE([GTK], [gtk+-2.0], [gtk_minimum_version])
XDT_CHECK_PACKAGE([GLIB], [glib-2.0], [glib_minimum_version])
XDT_CHECK_PACKAGE([GOBJECT], [gobject-2.0], [glib_minimum_version])
XDT_CHECK_PACKAGE([GTHREAD], [gthread-2.0], [glib_minimum_version])
XDT_CHECK_PACKAGE([GMODULE], [gmodule-2.0], [glib_minimum_version])
XDT_CHECK_PACKAGE([GIO], [gio-2.0], [glib_minimum_version])

XDT_CHECK_PACKAGE([GST], [gstreamer-0.10], [gstreamer_minimum_version])
XDT_CHECK_PACKAGE([GST_BASE], [gstreamer-base-0.10], [gstreamer_minimum_version])
XDT_CHECK_PACKAGE([GST_VIDEO], [gstreamer-video-0.10], [gstreamer_minimum_version])
XDT_CHECK_PACKAGE([GST_INTERFACES], [gstreamer-interfaces-0.10], [gstreamer_minimum_version])

XDT_CHECK_PACKAGE([DBUS], [dbus-1], [dbus_minimum_version])
XDT_CHECK_PACKAGE([DBUS_GLIB], [dbus-glib-1], [dbus_glib_minimum_version])

XDT_CHECK_PACKAGE([LIBXFCE4GUI], [libxfcegui4-1.0],[libxfcegui4_minimum_version])
XDT_CHECK_PACKAGE([LIBXFCE4UTIL], [libxfce4util-1.0],[libxfce4util_minimum_version])

#=======================================================#
#           Check for availability of libnotify         #
#=======================================================#
LIBNOTIFY_FOUND="no"
XDT_CHECK_OPTIONAL_PACKAGE([LIBNOTIFY],
                       [libnotify], [libnotify_minimum_version],
                       [libnotify], 
                       [libnotify library], [yes])

# Taken from Gnome system tools
#=======================================================#
#              Pixmaps  files              		#
#=======================================================#
if test "x${prefix}" = "xNONE"; then
  AC_DEFINE_UNQUOTED(PIXMAPS_DIR, "${ac_default_prefix}/${DATADIRNAME}/${PACKAGE}/pixmaps", [pixmaps directory])
  pixmapsdir="${ac_default_prefix}/${DATADIRNAME}/${PACKAGE}/pixmaps"
else
  AC_DEFINE_UNQUOTED(PIXMAPS_DIR, "${prefix}/${DATADIRNAME}/${PACKAGE}/pixmaps", [pixmaps directory])
  pixmapsdir="${prefix}/${DATADIRNAME}/${PACKAGE}/pixmaps"
fi

AC_SUBST(pixmapsdir)

#=======================================================#
#              Check plugins to build                   #
#=======================================================#

# Stream Properties plugin.
#--------------------------
AC_ARG_ENABLE([properties-plugin], AC_HELP_STRING([--disable-properties-plugin], [Don't build parole stream properties plugin]),
  [ac_properties_plugin=$enableval], [ac_properties_plugin=yes])
AC_MSG_CHECKING([whether to build the Parole stream properties plugin])
AM_CONDITIONAL([PAROLE_PROPERTIES_PLUGIN], [test x"$ac_properties_plugin" = x"yes"])
AC_MSG_RESULT([$ac_properties_plugin])

# Tray plugin.
#--------------------------
AC_ARG_ENABLE([tray-plugin], AC_HELP_STRING([--disable-tray-plugin], [Don't build parole tray icon plugin]),
  [ac_tray_plugin=$enableval], [ac_tray_plugin=yes])
AC_MSG_CHECKING([whether to build the system tray plugin])
AM_CONDITIONAL([PAROLE_TRAY_PLUGIN], [test x"$ac_tray_plugin" = x"yes"])
AC_MSG_RESULT([$ac_tray_plugin])
# Should we build the tray icon with notification support?
LIBNOTIFY_FOUND="no"
if test x"$ac_tray_plugin" = x"yes"; then
 	XDT_CHECK_OPTIONAL_PACKAGE([LIBNOTIFY],
 	[libnotify], [libnotify_minimum_version],
 	[libnotify],
 	[libnotify library], [yes]) 
fi

# Window title plugin.
#--------------------------
AC_ARG_ENABLE([window-title-plugin], AC_HELP_STRING([--disable-window-title-plugin], [Don't build the window title plugin]),
  [ac_window_title_plugin=$enableval], [ac_window_title_plugin=yes])
AC_MSG_CHECKING([whether to build the window title plugin])
AM_CONDITIONAL([WINDOW_TITLE_PLUGIN], [test x"$ac_window_title_plugin" = x"yes"])
AC_MSG_RESULT([$ac_window_title_plugin])

#=======================================================#
#              Check for debugging support              #
#=======================================================#
XDT_FEATURE_DEBUG

#=======================================================#
#              Check for Gtk doc	                #
#=======================================================#
GTK_DOC_CHECK(1.9)

AC_OUTPUT([
Makefile
data/Makefile
data/pixmaps/Makefile
data/interfaces/Makefile
data/icons/Makefile
data/icons/scalable/Makefile
data/icons/scalable/apps/Makefile
data/icons/scalable/status/Makefile
data/mime/Makefile
data/desktop/Makefile
parole/Makefile
plugins/Makefile
plugins/properties/Makefile
plugins/tray/Makefile
plugins/window-title/Makefile
docs/Makefile
docs/plugin-api/version.xml
docs/plugin-api/Makefile
po/Makefile.in
])

echo "
------------------------------------------------------
            Parole Media Player $VERSION
        ====================================
 
        prefix:                 	$prefix
	pixmapsdir:			$pixmapsdir
	Notification:			$LIBNOTIFY_FOUND
        Debug:   			$enable_debug
	Building plugin api docs:       ${enable_gtk_doc}
	
	Plugins to build:
	=================
	Stream Properties:       	${ac_properties_plugin}
	System Tray icon:       	${ac_tray_plugin} (With notification $LIBNOTIFY_FOUND)
	Window title:			${ac_window_title_plugin}
------------------------------------------------------

Configuration finished, type make to compile"
